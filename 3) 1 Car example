dates = ['3_1_21','2_1_21','1_1_21']

def function(name,types,date):
    #gloabl allows you to see this data outside the fuction
    global all_data
    global final_incentive_all
    global incentive
    global incentive_forecast
    #Final Forecasted Incentives chosen for the forecast with 60 months of historical data
    all_data = pd.read_excel(f'/test/data/hadoop-data/JT/White Book/Final/{date}/FINAL_Incentive.xlsx') 
    #Reads in the active portfolio maturities by model and month
    all_volume = pd.read_excel(f'/test/data/hadoop-data/JT/White Book/Final/{date}/FINAL_VOLUME.xlsx')
    #Reads in the 24 potential forecasted Incentive options
    final_incentive = pd.read_excel(f'/test/data/hadoop-data/JT/White Book/Final/{date}/FINAL_INCENTIVE_FORECAST.xlsx')
    #Reads in the 24 potential forecasted Incentive options
    final_incentive_all = pd.read_excel(f'/test/data/hadoop-data/JT/White Book/Final/{date}/FINAL_INCENTIVE_FORECAST.xlsx')
    #Final Forecasted Incentives chosen for the forecast with 60 months of historical data
    incentive = pd.read_excel(f'/test/data/hadoop-data/JT/White Book/Final/{date}/FINAL_Incentive.xlsx')
    #Reads in the disposal volume which is by month and model
    disp = pd.read_excel(f'/test/data/hadoop-data/JT/White Book/Final/{date}/DISP_BY_MODEL.xlsx')
    
    #Filters Volume down to the model level, Renames freq to VOlume and creates a column Data, which is a Date time
    model_volume = all_volume[all_volume['model']==f'{name}']
    model_volume =model_volume.rename(columns= {'_FREQ_':'volume'})
    model_volume['DATE'] = pd.to_datetime(model_volume['Current_Maturity_Date_ups'], format="%m/%d/%Y").dt.date #create date colum

    #Filters Incenitve down to the model level, and creates a column Data, which is a Date time, also creates a column 
    #to deterimine if the incentives are historical or forecasted based on the time
    incentive['DATE'] = pd.to_datetime(incentive['month'], format="%m/%d/%Y").dt.date #create date colum
    incentive['type'] = ['Historical' if  x < datetime.date(2021,4,1) else 'Forecast' for x in incentive['DATE']] #update #historical vs forecast
    incentive = incentive[incentive['model']==f'{name}']
    
    #Fitlers down the disposal Data to model level, renames Freq to Volume, Creates a Date variable, filters down to last known
    #historical period, this will need to be updated each month / forecast
    disp = disp[disp['model']==f'{name}']
    disp = disp.rename(columns={'_FREQ_':'volume'})
    disp['DATE'] = pd.to_datetime(disp['Monyy_Sold'], format="%m/%d/%Y").dt.date #create date colum
    disp = disp.drop(['Monyy_Sold', '_STAT_','MSRP','model'], axis = 1)
    disp = disp[disp['DATE']<datetime.date(2021,4,1)] #update
    
    #merges the hisorical incentive with disposals, used this for the charts to keep consistent x axis
    historical_vol= pd.merge(incentive, disp, on='DATE', how='inner')
    
    #forecasted incentives, Date needs to be updated each forecast
    filter_incentive = incentive[incentive['DATE']>=datetime.date(2021,4,1)] #update
    
    #pivoting the incentive by type, which is the 24 forecasted methods, it's then aggregating to a mean
    #created a delta varibale which is historical 12 month avg - forecast avg
    #created a MAPE varibale, which is the MAPE of 12 month historical to forecast
    pivot_incentive = pd.pivot_table(filter_incentive,index='_TYPE_',values='incentive',aggfunc='mean')
    pivot_incentive = pivot_incentive.reset_index()
    pivot_incentive['delta'] = pivot_incentive['incentive'] - pivot_incentive['incentive'][0]
    pivot_incentive['MAPE'] = abs(pivot_incentive['delta'])/pivot_incentive['incentive'][0]  
    pivot_incentive['string'] =str(pivot_incentive['incentive'])
    
    
    

    #Final forecasts separates historical from not historical to chart
    final_incentive['DATE'] = pd.to_datetime(final_incentive['monyy_sold'], format="%m/%d/%Y").dt.date #create date colum
    final_incentive['type'] = ['Historical' if  x < datetime.date(2021,4,1) else 'Forecast' for x in final_incentive['DATE']] #update #historical vs forecast
    final_incentive = final_incentive[final_incentive['model']==f'{name}']
    final_historical = final_incentive[final_incentive['type'] == 'Historical']
    final_forecast = final_incentive[final_incentive['type'] != 'Historical']
    
    
    
    #one forecasted type
    incentive_forecast = incentive[incentive['_TYPE_']==f'{types}']
    
    #rounding averages
    ff= round(incentive_forecast.incentive.mean())
    fff= round(final_forecast.incentive.mean())    
    
    #formating the rounded numbers above
    b= "{:,.0f}".format(ff)
    c= "{:,.0f}".format(fff)
    
        #create the Charts
    
    fig = make_subplots(rows=1, cols=2,shared_xaxes=False,vertical_spacing=0.06,
                    specs=[[{"type": "table"},{"type": "table"}],])

    fig.add_trace(go.Table(header=dict(values=['Date','Type','Incentive'],font=dict(size=10),align="center"),cells=dict(values=[incentive.DATE,incentive._TYPE_.values,incentive.incentive.values.round(2)],align = "center")),row=1, col=1)
      
    
    fig.add_trace(go.Table(header=dict(values=['Method','12 Month Avg ','Delta','MAPE'],font=dict(size=10),align="center"),cells=dict(values=[pivot_incentive._TYPE_.values,pivot_incentive.incentive.values.round(),pivot_incentive.delta.values.round(2),pivot_incentive.MAPE.values.round(2)],align = "center")),row=1, col=2)
    
    fig.update_layout(title=f'Historical and Forecasted 12 Month Avg Incentive for {name}',title_x=0.5)
 
    fig2 = make_subplots(rows=1, cols=1,shared_xaxes=False,vertical_spacing=0.06,
                    specs=[[{"secondary_y": True},],])  

    fig2.add_trace(go.Scatter(x=final_historical['DATE'], y=final_historical['incentive'],line_shape='linear',marker_color='navy',
                              line = dict(shape = 'linear', dash = 'solid'),name='Historical',
                              connectgaps = True),secondary_y=False,row=1, col=1)
    fig2.add_trace(go.Scatter(x=incentive_forecast['DATE'], y=incentive_forecast['incentive'],line_shape='linear',
                              line = dict(shape = 'linear', dash = 'dot') ,name="Forecast",
                              
                              connectgaps = True),secondary_y=False,row=1, col=1)

    fig2.add_trace(go.Bar(x=model_volume['DATE'], y=model_volume['volume'],name="Maturities",marker_color='midnightblue',opacity=0.3,
                              text=model_volume['volume'].round()),secondary_y=True,row=1, col=1)
    fig2.add_trace(go.Bar(x=historical_vol['DATE'], y=historical_vol['volume'],name="Historical Volume",marker_color='blue',opacity=0.3,
                              text=model_volume['volume'].round()),secondary_y=True,row=1, col=1)
    
    
    fig2.update_layout(yaxis=dict(range=[0,final_historical['incentive'].max()+1000]),
                       yaxis_tickprefix = '$', yaxis_tickformat = ',.0f',
                      yaxis2=dict(range=[0,model_volume['volume'].max()+3000]),
                      yaxis2_tickformat = ',.0f',)
    fig2.update_yaxes(title_text="<b>Maturity Volume</b>", secondary_y=True)


    fig2.update_layout(title=f'Average Incentive Spend by {name}'+" " + "$" + str(b),title_x=0.5,
                   xaxis_title='New Sale Month / Year',
                   yaxis_title='Incentive Spend')
    


    fig.update_xaxes(color='Blue')

    fig.show()
    fig2.show()

        
   
function('JETTA','wa_1_10','3_1_21')  

# change the cell width
from IPython.core.display import display, HTML
display(HTML("<style>.container { width:75% !important; }</style>"))
